{"version":3,"sources":["lib/styles/palette.js","components/auth/AuthTemplate.js","components/common/Button.js","components/auth/AuthForm.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","modules/user.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/common/Responsive.js","components/write/Editor.js","modules/write.js","lib/api/posts.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","components/common/Header.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/post/PostViewer.js","modules/post.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","components/posts/PostList.js","modules/posts.js","containers/posts/PostListContainer.js","pages/PostListPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","red","AuthTemplateBlock","styled","div","WhiteBox","AuthTemplate","children","className","to","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","login","register","ErrorMessage","AuthForm","type","form","onChange","onSubmit","error","text","autoComplete","name","placeholder","value","username","password","passwordConfirm","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","client","axios","create","logout","post","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","key","initializeForm","registerSaga","loginSaga","takeLatest","initialState","auth","produce","draft","authError","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","checkError","withRouter","history","useState","setError","dispatch","useDispatch","useSelector","useEffect","push","setItem","JSON","stringify","target","preventDefault","LoginPage","status","includes","RegisterPage","ResponsiveBlock","Responsive","rest","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","title","body","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","tags","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","_id","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","tag","onRemove","onClick","TagList","map","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","HeaderBlock","Wrapper","Spacer","UserInfo","Header","onLogout","HeaderContainer","SubInfoBlock","hasMarginTop","SubInfo","publishDate","Date","toLocaleDateString","TagsBlock","Tags","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","match","postId","params","a","delete","ownPost","PostPage","PaginationBlock","PageNumber","buildLink","page","query","qs","Pagination","lastPage","disabled","undefined","location","posts","parse","search","ignoreQueryPrefix","parseInt","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","PostList","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","listPostsSaga","queryString","headers","PostListPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66210aa5.chunk.js","sourcesContent":["const palette = {\n    gray: [\n      '#f8f9fa',\n      '#f1f3f5',\n      '#e9ecef',\n      '#dee2e6',\n      '#ced4da',\n      '#adb5bd',\n      '#868e96',\n      '#495057',\n      '#343a40',\n      '#212529',\n    ],\n    red: [\n      '#fff5f5',\n      '#ffe3e3',\n      '#ffc9c9',\n      '#ffa8a8',\n      '#ff8787',\n      '#ff6b6b',\n      '#fa5252',\n      '#f03e3e',\n      '#e03131',\n      '#c92a2a',\n    ],\n  };\n  \n  export default palette;","\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\n\n// 회원가입 로그인 페이지의 레이아웃 담당\n\n// 화면의 배경\nconst AuthTemplateBlock = styled.div`\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    background: ${palette.gray[2]};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\n// 화면 가운데의 박스\nconst WhiteBox = styled.div`\n    .logo-area {\n        display: block;\n        padding-bottom: 2rem;\n        text-align: center;\n        font-weight: bold;\n        letter-spacing: 2px;\n    }\n    box-shadow: 0 0 8px rgba(0,0,0,0.025);\n    padding: 2rem;\n    width: 360px;\n    background: #fff;\n    border-radius: 2px;\n`\n\nconst AuthTemplate = ({children}) => {\n    return (\n        <AuthTemplateBlock>\n            <WhiteBox>\n                <div className=\"logo-area\">\n                    <Link to=\"/\">GIVVEMEE ❣️</Link>\n                </div>\n                {children}\n            </WhiteBox>\n        </AuthTemplateBlock>\n    );\n};\n\nexport default AuthTemplate;","import { Link } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\n\nconst buttonStyle = css`\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    font-weight: bold;\n    padding: .25rem 1rem;\n    color: #fff;\n    outline: none;\n    cursor: pointer;\n\n    background: ${palette.gray[8]};\n    &:hover {\n        background: ${palette.gray[6]}\n    }\n\n    ${props => props.fullWidth && css`\n        padding-top: 0.75rem;\n        padding-bottom: 0.75rem;\n        width: 100%;\n        font-size: 1.125rem;\n    `}\n    ${props => props.red && css`\n        background: ${palette.red[5]};\n        &:hover {\n            background: ${palette.red[4]};\n        }\n    `}\n    &:disabled {\n        background: ${palette.gray[3]};\n        color: ${palette.gray[5]};\n        cursor: not-allowed;\n    }\n`\n\nconst StyledButton = styled.button`\n    ${buttonStyle}\n`\nconst StyledLink = styled(Link)`\n    ${buttonStyle}\n`\n\nconst Button = props => {\n    return props.to ? (\n        <StyledLink {...props} red={props.red ? 1 : 0}/>\n    ) : (\n        <StyledButton {...props}/>\n    )\n}\n\nexport default Button;","\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport Button from \"../common/Button\";\n\n// 회원가입 또는 로그인 폼을 보여주는 컴포넌트\n\nconst AuthFormBlock = styled.div`\n    h3 {\n        margin: 0;\n        color: ${palette.gray[8]};\n        margin-bottom: 1rem;\n    }\n`\nconst StyledInput = styled.input`\n    font-style: 1rem;\n    border: none;\n    border-bottom: 1px solid ${palette.gray[5]};\n    padding-bottom: 0.5rem;\n    outline: none;\n    width: 100%;\n    &:focus {\n        color: $oc-teal-7;\n        border-bottom: 1px solid ${palette.gray[7]};\n    }\n    &+& {\n        margin-top: 1rem;\n    }\n`\n\n// 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\nconst Footer = styled.div`\n    margin-top: 2rem;\n    text-align: right;\n    a {\n        color: ${palette.gray[6]};\n        text-decoration: underline;\n        &:hover {\n            color: ${palette.gray[9]};\n        }\n    }\n`\n\n// 여백\nconst ButtonWithMarginTop = styled(Button)`\n    margin-top: 1rem;\n`\n\nconst textMap = {\n    login: 'Log in',\n    register: 'Sign Up'\n}\n\n// showing Error\nconst ErrorMessage = styled.div`\n    color: red;\n    text-align: center;\n    font-size: 0.875rem;\n    margin-top: 1rem;\n`\n\n\nconst AuthForm = ({type, form, onChange, onSubmit, error}) => {\n    const text = textMap[type]\n\n    return (\n        <AuthFormBlock>\n            <h3>{text}</h3>\n            <form onSubmit={onSubmit}>\n                <StyledInput autoComplete=\"username\" name=\"username\" placeholder=\"id\" onChange={onChange} value={form.username}/>\n                <StyledInput autoComplete=\"new-password\" name=\"password\" placeholder=\"password\" type=\"password\" onChange={onChange} value={form.password}/>\n                {\n                    type === 'register' && \n                    (<StyledInput autoComplete=\"new-password\" name=\"passwordConfirm\" placeholder=\"Confirm Password\" type=\"password\" onChange={onChange} value={form.passwordConfirm}/>)\n                }\n                {\n                    error && \n                    <ErrorMessage>{error}</ErrorMessage>\n                }\n                <ButtonWithMarginTop red fullWidth>{text}</ButtonWithMarginTop>\n            </form>\n            <Footer>\n                {\n                    type === 'login' ? (<Link to=\"/register\">Sign Up</Link>) : (<Link to=\"/login\">Log in</Link>)\n                }\n            </Footer>\n        </AuthFormBlock>\n    );\n};\n\nexport default AuthForm;","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n\n// import { createAction, handleActions } from \"redux-actions\";\n\n// const START_LOADING = 'loading/START_LOADING';\n// const FINISH_LOADING = 'loading/FINISH_LOADING';\n\n// // 요청을 위한 액션 타입을 payload 로 설정 \n\n// export const startLoading = createAction(\n//     START_LOADING,\n//     requestType => requestType\n// )\n\n// export const finishLoading = createAction(\n//     FINISH_LOADING,\n//     requestType => requestType\n// )\n\n// const initialState = {};\n\n// const loading = handleActions(\n//     {\n//         [START_LOADING]: (state, action) => ({\n//             ...state,\n//             [action.payload]: true\n//         }),\n//         [FINISH_LOADING]: (state, action) => ({\n//             ...state,\n//             [action.payload]: false\n//         }),\n//     },\n//     initialState\n// )\n\n// export default loading;","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function*(action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n\n","import axios from 'axios'\n\nconst client = axios.create()\n\n/*\n글로벌 설정 예시:\n\nAPI 주소를 다른 곳으로 사용할 때\nclient.defaults.baseURL = 'https://external-api-server.com/'\n\n헤더 설정\nclient.defaults.headers.common['Authorizaion'] = 'Bearer a1b2c3d4'\n\n인터셉터 설정\naxios.intercepter.response.use(\\\n    response => {\n        // 요청 성공시 특정 작업 수행ㄴ\n        return response;\n    },\n    error => {\n        // 요청 실패시 특정 작업 수행\n        return Promise.reject(error)\n    }\n})\n*/\n\nexport default client;","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('api/auth/logout');","import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport {takeLatest} from 'redux-saga/effects'\nimport * as authAPI from '../lib/api/auth'\n\nconst CHANGE_FIELD = 'auth/CAHNGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n    'auth/REGISTER'\n)\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n    'auth/LOGIN'\n)\n\nexport const changeField = createAction(\n    CHANGE_FIELD,\n    ({form, key, value}) => ({\n        form, // register, login\n        key, // username, name, password\n        value // 실제 바꾸려는 값\n    }),\n)\n\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form)\n\nexport const register = createAction(REGISTER, ({username, password}) => ({\n    username, \n    password\n}))\nexport const login = createAction(LOGIN, ({username, password}) => ({\n    username, \n    password\n}))\n\n// 사가 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register)\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login)\nexport function* authSaga() {\n    yield takeLatest (REGISTER, registerSaga)\n    yield takeLatest (LOGIN, loginSaga)\n}\n\nconst initialState = {\n    register: {\n        username: '',\n        password: '',\n        passwordConfirm: ''\n    },\n    login: {\n        username: '',\n        password: ''\n    }\n}\n\nconst auth = handleActions(\n    {\n        [CHANGE_FIELD]: (state, {payload: {form, key, value} }) => produce(state, draft => {\n            draft[form][key] = value; // ex) state.register.username 을 바꾼다\n        }),\n        [INITIALIZE_FORM]: (state, {payload: form}) => ({\n            ...state,\n            [form]: initialState[form],\n        }),\n        //회원 가입 성공\n        [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\n            ...state,\n            authError: null,\n            auth,\n        }),\n        // 회원 가입 실패\n        [REGISTER_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            authError: error,\n        }),\n        // 로그인 성공\n        [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\n            ...state,\n            authError: null,\n            auth,\n        }),\n        // 로그인 실패\n        [LOGIN_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            authError: error,\n        })\n    },\n    initialState\n)\n\nexport default auth;","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK'\n);\nconst LOGOUT = 'user/LOGOUT'\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n    try {\n        localStorage.removeItem('user') // localStorage 에서 user 제거\n    } catch (e) {\n        console.log('localStorage is not working')\n    }\n}\n\nfunction* logoutSaga() {\n    try {\n        yield call(authAPI.logout) // logout API 호출\n        localStorage.removeItem('user')\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga)\n}\n\nconst initialState = {\n  user: null,\n  checkError: null\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error\n    }),\n    [LOGOUT]: state => ({\n        ...state,\n        user: null\n    })\n  },\n  initialState\n);","\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport { withRouter } from 'react-router-dom';\nimport { check } from '../../modules/user';\n\nconst LoginForm = ({history}) => {\n    const [error, setError] = useState(null)\n    const dispatch = useDispatch()\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\n        form: auth.login,\n        auth: auth.auth,\n        authError: auth.authError,\n        user: user.user\n    }))\n\n    // input event\n    const onChange = e => {\n        const {value, name} = e.target\n        dispatch(\n            changeField({\n                form: 'login',\n                key: name,\n                value\n            })\n        )\n    }\n\n    // form submit event\n    const onSubmit = e => {\n        e.preventDefault()\n        const {username, password} = form;\n        dispatch(login({username, password}))\n    }\n\n    // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n    useEffect(() => {\n        dispatch(initializeForm('login'))\n    }, [dispatch])\n\n    useEffect(() => {\n      if(authError) {\n        console.log('오류 발생')\n        console.log(authError)\n        setError('Login Failed')\n        return;\n      }\n      if (auth) {\n        console.log('로그인 성공')\n        dispatch(check())\n      }\n    }, [auth, authError, dispatch])\n\n    useEffect(() => {\n      if (user) {\n        history.push('/')\n        try {\n          localStorage.setItem('user', JSON.stringify(user))\n        } catch (e) {\n          console.log('localStorage is not working')\n        }\n      }\n    }, [history, user])\n\n    return (\n        <AuthForm type=\"login\" form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\n    );\n};\n\nexport default withRouter(LoginForm);","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n    return (\n        <AuthTemplate>\n            <LoginForm />\n        </AuthTemplate>\n    );\n};\n\nexport default LoginPage;","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport user, { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({history}) => {\n\n    const [error, setError] = useState(null)\n    const dispatch = useDispatch()\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\n        form: auth.register,\n        auth: auth.auth,\n        authError: auth.authError,\n        user: user.user\n    }))\n\n    // input event\n    const onChange = e => {\n        const {value, name} = e.target\n        dispatch(\n            changeField({\n                form: 'register',\n                key: name,\n                value\n            })\n        )\n    }\n\n    // form submit event\n    const onSubmit = e => {\n        e.preventDefault()\n        const {username, password, passwordConfirm} = form;\n        // 빈칸이 있다면\n        if ([username, passwordConfirm, password].includes('')) {\n          setError('Fill the blank')\n          return;\n        }\n        // 비밀번호가 일치하지 않는다면\n        if (password !== passwordConfirm) {\n            setError('Password does not match')\n            dispatch(changeField({form: 'register', key: 'password', value:''}))\n            dispatch(changeField({form: 'register', key: 'passwordConfirm', value:''}))\n            return;\n        }\n        dispatch(register({username, password}))\n    }\n\n    // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n    useEffect(() => {\n        dispatch(initializeForm('register'))\n    }, [dispatch])\n\n    // 회원가입 성공과 실패 처리\n    useEffect(() => {\n        if (authError) {\n          // 계정명이 이미 존재\n          if (authError.response.status === 409) {\n            setError('The username is already in use')\n            return;\n          }\n          // 기타 이유\n          setError('Register Failed')\n          return ;\n        }\n        if (auth) {\n            console.log('회원가입 성공')\n            console.log(auth)\n            dispatch(check())\n        }\n    }, [auth, authError, dispatch])\n\n    // user 값이 잘 설정되었는지 확인\n    useEffect(() => {\n      if (user) {\n        history.push('/')\n        try {\n          localStorage.setItem('user', JSON.stringify(user))\n        } catch (e) {\n          console.log('localStorage is not working')\n        }\n      }\n    }, [history, user])\n\n    return (\n        <AuthForm type=\"register\" form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\n    );\n};\n\nexport default withRouter(RegisterForm)","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n    return (\n        <div>\n            <AuthTemplate>\n                <RegisterForm />\n            </AuthTemplate>\n        </div>\n    );\n};\n\nexport default RegisterPage;","import styled from \"styled-components\";\n\nconst ResponsiveBlock = styled.div`\n    padding-left: 1rem;\n    padding-right: 1rem;\n    width: 1024px;\n    margin: 0 auto;\n\n    @media (max-width: 1024px) {\n        width: 768px;\n    }\n\n    @media (max-width: 768px) {\n        width: 100%;\n    }\n`\n\nconst Responsive = ({children, ...rest}) => {\n    // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록 ...rest 를 사용하여 responsiveBlock 에 전달\n    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>\n}\n\nexport default Responsive;","import { useEffect, useRef } from \"react\";\nimport Quill from \"quill\";\nimport 'quill/dist/quill.snow.css'\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\n\nconst EditorBlock = styled(Responsive)`\n    padding-top: 5rem;\n    padding-bottom: 5rem;\n`\nconst TitleInput = styled.input`\n    font-size: 3rem;\n    outline: none;\n    padding-bottom: 0.5rem;\n    border: none;\n    border-bottom: 1px solid ${palette.gray[4]};\n    margin-bottom: 2rem;\n    width: 100%;\n`\nconst QuillWrapper = styled.div`\n    .ql-editor {\n        padding: 0;\n        min-height: 320px;\n        font-size: 1.125rem;\n        line-height: 1.5;\n    }\n    .ql-editor.ql-blank::before {\n        left: 0;\n    }\n`\n\nconst Editor = ({onChangeField, title, body}) => {\n    const quillElement = useRef(null) // quill 를 적용할 div 설정\n    const quillInstance = useRef(null) // quill 인스턴스 설정\n\n    useEffect(() => {\n        quillInstance.current = new Quill(quillElement.current, {\n            theme: 'snow',\n            placeholder: 'type something...',\n            modules: {\n                toolbar: [\n                    [{ 'header': 1 }, { 'header': 2 }],    \n                    ['bold', 'italic', 'underline', 'strike'],   \n                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n                    ['blockquote', 'code-block', 'link', 'image'],\n                ],\n            }\n        })\n        const quill = quillInstance.current;\n        quill.on('text-change', (delta, oldDelta, source) => {\n            if (source === 'user') {\n                onChangeField({key: 'body', value: quill.root.innerHTML});\n            }\n        })\n    }, [onChangeField])\n\n    const mounted = useRef(false);\n    useEffect(() => {\n        if (mounted.current) return;\n        mounted.current = true;\n        quillInstance.current.root.innerHTML = body;\n    }, [body])\n\n   \n    const onChangeTitle = e => {\n        onChangeField({key: 'title', value: e.target.value})\n    }\n\n    return (\n        <EditorBlock>\n            <TitleInput placeholder=\"input title\" onChange={onChangeTitle} value={title}/>\n            <QuillWrapper>\n                <div ref={quillElement}/>\n            </QuillWrapper>\n        </EditorBlock>\n    )\n}\n\nexport default Editor;","import { createAction, handleActions } from \"redux-actions\";\nimport * as postsAPI from '../lib/api/posts';\nimport {takeLatest} from 'redux-saga/effects'\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\nconst [\n    WRITE_POST,\n    WRITE_POST_SUCCESS,\n    WRITE_POST_FAILURE\n] = createRequestActionTypes('write/WRITE_POST') // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST'\nconst [\n    UPDATE_POST, \n    UPDATE_POST_SUCCESS,\n    UPDATE_POST_FAILURE\n] = createRequestActionTypes('write/UPDATE_POST') // 포스트 수정 \n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value}) => ({\n    key,\n    value\n}));\nexport const writePost = createAction(WRITE_POST, ({title, body, tags}) => ({\n    title,\n    body, \n    tags\n}))\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post)\nexport const updatePost = createAction(UPDATE_POST, ({id, title, body, tags}) => ({id, title, body, tags}))\n\n// 사가 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost)\n\nexport function* writeSaga() {\n    yield takeLatest(WRITE_POST, writePostSaga)\n    yield takeLatest(UPDATE_POST, updatePostSaga)\n}\nconst initialState = {\n    title: '',\n    body: '',\n    tags: [],\n    post: null,\n    postError: null,\n    originalPostId: null\n}\n\nconst write = handleActions(\n    {\n        [INITIALIZE] : state => initialState, // initialState 를 넣으면 초기 상태로 바뀜\n        [CHANGE_FIELD] : (state, {payload : {key, value}}) => ({\n            ...state,\n            [key]: value // 특정 key 값 업데이트\n        }),\n        [WRITE_POST]: state => ({\n            ...state, \n            // post 와 postError 를 초기화\n            post: null,\n            postError: null\n        }),\n        // 포스트 작성 성공\n        [WRITE_POST_SUCCESS]: (state, {payload: post}) => ({\n            ...state,\n            post\n        }),\n        // 포스트 작성 실패\n        [WRITE_POST_FAILURE]: (state, {payload: postError}) => ({\n            ...state,\n            postError\n        }),\n        [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\n            ...state,\n            title: post.title,\n            body: post.body,\n            tags: post.tags,\n            originalPostId: post._id\n        }),\n        [UPDATE_POST_SUCCESS]: (state, {payload: post}) => ({\n            ...state,\n            post,\n        }), \n        [UPDATE_POST_FAILURE]: (state, {payload: postError}) => ({\n            ...state,\n            postError\n        })\n    },\n    initialState\n)\n\nexport default write;","import qs from 'qs'\nimport client from \"./client\";\n\nexport const writePost = ({ title, body, tags }) => client.post('/api/posts', {title, body, tags})\nexport const readPost = id => client.get(`/api/posts/${id}`)\nexport const listPosts = ({page, username, tag}) => {\n    const queryString = qs.stringify({\n        page, username, tag\n    })\n    return client.get(`/api/posts?${queryString}`);\n}\nexport const updatePost = ({id, title, body, tags}) => client.patch(`/api/posts/${id}`, {title, body, tags})\nexport const removePost = id => client.delete(`/api/posts/${id}`)","import { useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport Editor from \"../../components/write/Editor\";\nimport { changeField, initialize } from \"../../modules/write\";\n\nconst EditorContainer = () => {\n    const dispatch = useDispatch()\n    const {title, body} = useSelector(({ write }) => ({\n        title: write.title,\n        body: write.body\n    }))\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [dispatch])\n    \n    // 언마운트 시 초기화\n    useEffect(() => {\n        return () => {\n            dispatch(initialize())\n        }\n    }, [dispatch])\n    return (\n        <Editor onChangeField={onChangeField} title={title} body={body} /> \n    );\n};\n\nexport default EditorContainer;","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n    width: 100%;\n    border-top: 1px solid ${palette.gray[2]};\n    padding-top: 2rem;\n\n    h4 {\n        color: ${palette.gray[8]};\n        margin-top: 0;\n        margin-bottom: 0.5rem;\n    }\n`\nconst TagForm = styled.form`\n    border-radius: 4px;\n    overflow: hidden;\n    display: flex;\n    width: 256px;\n    border: 1px solid ${palette.gray[9]};\n    input, button {\n        outline: none;\n        border: none;\n        font-size: 1rem;\n    }\n    input { \n        padding: 0.5rem;\n        flex: 1;\n        min-width: 0;\n    }\n    button {\n        cursor: pointer;\n        padding-right: 1rem;\n        padding-left: 1rem;\n        border: none;\n        background: ${palette.gray[8]};\n        color: #fff;\n        font-weight: bold;\n        &:hover {\n            background: ${palette.gray[6]};\n        }\n    }\n`\nconst Tag = styled.div`\n    margin-right: 0.5rem;\n    color: ${palette.gray[8]};\n    cursor: pointer;\n    &:hover{\n        opacity: .5;\n    }\n`\nconst TagListBlock = styled.div`\n    display: flex;\n    margin-top: .5rem;\n`\n\n// React.memo 를 사용하여 tag 값이 바뀔 때만 리렌더링\nconst TagItem = React.memo(({tag, onRemove}) => \n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n)\n\n// React.memo 를 사용하여 tag 값이 바뀔 때만 리렌더링\nconst TagList = React.memo(({tags, onRemove}) => (\n    <TagListBlock>\n        {tags.map(tag => (<TagItem key={tag} tag={tag} onRemove={onRemove}/>))}\n    </TagListBlock>\n))\n\nconst TagBox = ({tags, onChangeTags}) => {\n    const [input, setInput] = useState('')\n    const [localTags, setLocalTags] = useState([])\n\n    const insertTag = useCallback(\n        tag => {\n            if (!tag) return; // 공백이라면 추가하지 않음\n            if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n            const nextTags = [...localTags, tag];\n            setLocalTags([...localTags, tag])\n            onChangeTags(nextTags)\n        }, [localTags, onChangeTags]\n    )\n\n    const onRemove = useCallback(\n        tag => {\n            const nextTags = localTags.filter(t => t !== tag)\n            setLocalTags(nextTags)\n            onChangeTags(nextTags)\n        }, [localTags, onChangeTags]\n    )\n\n    const onChange = useCallback( e => {\n        setInput(e.target.value)\n    }, [])\n\n    const onSubmit = useCallback( e => {\n        e.preventDefault()\n        insertTag(input.trim()); // 앞뒥 공백을 없앤 후 등록\n        setInput('')\n    }, [input, insertTag])\n\n    // tag 값이 바뀔 때\n    useEffect(() => {\n        setLocalTags(tags)\n    }, [tags])\n    \n    return (\n        <TagBoxBlock>\n            <h4>Tag</h4>\n            <TagForm onSubmit={onSubmit}>\n                <input placeholder=\"enter tags\" value={input} onChange={onChange}/>\n                <button type=\"submit\">Add</button>\n            </TagForm>\n            <TagList tags={localTags} onRemove={onRemove} />\n        </TagBoxBlock>\n    );\n};\n\nexport default TagBox;","import { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport TagBox from \"../../components/write/TagBox\";\nimport { changeField } from \"../../modules/write\";\n\nconst TagBoxContainer = () => {\n    const dispatch = useDispatch()\n    const tags = useSelector(state => state.write.tags)\n    const onChangeTags = nextTags => {\n        dispatch(\n            changeField({\n                key: 'tags',\n                value: nextTags\n            })\n        )\n    }\n    return (\n        <TagBox onChangeTags={onChangeTags} tags={tags} />\n    );\n};\n\nexport default TagBoxContainer;","import styled from \"styled-components\";\nimport Button from \"../common/Button\";\n\nconst WriteActionButtonsBlock = styled.div`\n    margin-top: 1rem;;\n    margin-bottom: 3rem;\n    button + button {\n        margin-left: 0.5rem;\n    }\n`\n// TagBox 에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로간의 여백 지정\nconst StyledButton = styled(Button)`\n    height: 2.125rem;\n    & + & {\n        margin-left: 0.5rem;\n    }\n`\n\nconst WriteActionButtons = ({onCancel, onPublish, isEdit}) => {\n    return (\n        <WriteActionButtonsBlock>\n            <StyledButton red onClick={onPublish}>\n                Post {isEdit ? 'Edit' : ''}\n            </StyledButton>\n            <StyledButton onClick={onCancel}>Cancel</StyledButton>\n        </WriteActionButtonsBlock>\n    )\n}\n\nexport default WriteActionButtons;","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { updatePost, writePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({history}) => {\n    const dispatch = useDispatch()\n    const {title, body, tags, post, postError, originalPostId} = useSelector(({write}) => ({\n        title: write.title,\n        body: write.body,\n        tags: write.tags,\n        post: write.post,\n        postError: write.postError,\n        originalPostId: write.originalPostId\n    }))\n\n    // 포스트 등록\n    const onPublish = () => {\n        if (originalPostId) {\n            dispatch(\n                updatePost({ title, body, tags, id: originalPostId })\n            )\n            return\n        }\n        dispatch(writePost({title, body, tags}))\n    }\n    // 취소\n    const onCancel = () => {\n        history.goBack()\n    }\n    // 성공 혹은 실패 시 할 작업\n    useEffect(() => {\n        if (post) {\n            const { _id, user} = post;\n            history.push(`/@${user.username}/${_id}`);\n        }\n        if (postError) {\n            console.log(postError)\n        }\n    }, [history, postError, post])\n\n    return (\n        <WriteActionButtons onPublish={onPublish} onCancel={onCancel} isEdit={!originalPostId}/>\n    );\n};\n\nexport default withRouter(WriteActionButtonsContainer);","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Responsive from '../components/common/Responsive';\nimport EditorContainer from '../containers/write/EditorContainer';\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\n\nconst WritePage = () => {\n    return (\n        <Responsive>\n             <Helmet>\n                <title>New Post - GIVVEMEE ❣️</title>\n            </Helmet>\n            <EditorContainer />\n            <TagBoxContainer />\n            <WriteActionButtonsContainer />\n        </Responsive>\n    );\n};\n\nexport default WritePage;","import styled from \"styled-components\";\nimport Responsive from \"./Responsive\";\nimport Button from \"./Button\";\nimport { Link } from \"react-router-dom\";\n\nconst HeaderBlock = styled.div`\n    position: fixed;\n    width: 100%;\n    background: white;\n    box-shadow: 0px 2px 4px rgba(0,0,0, 0.08);\n`\n\n// Responsive 컴포넌트의 속성에 스타일을 추가하여 새로운 컴포넌트 생성\nconst Wrapper = styled(Responsive)`\n    height: 4rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    .logo {\n        font-size: 1.125rem;\n        font-weight: 800;\n        letter-spacing: 2px;\n    }\n    .right {\n        display: flex;\n        align-items: center;\n    }\n`\n\n// 헤더가 fixed 이기 때문에 페이지의 콘텐츠가 4rem 이하에서 노출되도록\nconst Spacer = styled.div`\n    height: 4rem;\n`\n\nconst UserInfo = styled.div`\n    font-weight: 800;\n    margin-right: 1rem;\n`\n\nconst Header = ({user, onLogout}) => {\n    return (\n        <>\n            <HeaderBlock>\n                <Wrapper>\n                    <Link to=\"/\" className=\"logo\">GIVVEMEE ❣️</Link>\n                    {\n                        user ? (\n                            <div className=\"right\">\n                                <UserInfo>{user.username}</UserInfo>\n                                <Button onClick={onLogout}>Log out</Button>\n                            </div>\n                        ) : (\n                            <div className=\"right\">\n                                <Button to=\"/login\">Login</Button>\n                            </div>\n                        )\n                    }\n                </Wrapper>\n            </HeaderBlock>\n            <Spacer/>\n        </>\n    )\n}\n\nexport default Header;","import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport Header from \"../../components/common/Header\";\nimport { logout } from \"../../modules/user\";\n\nconst HeaderContainer = () => {\n    const {user} = useSelector(({user}) => ({user: user.user}))\n    const dispatch = useDispatch()\n    const onLogout = () => {\n        dispatch(logout())\n    }\n    return <Header user={user} onLogout={onLogout}/>\n}\n\nexport default HeaderContainer;","import styled, {css} from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport palette from \"../../lib/styles/palette\";\n\n\nconst SubInfoBlock = styled.div`\n    ${props => props.hasMarginTop && css`\n        margin-top: 1rem;\n    `}\n    color: ${palette.gray[6]};\n    span + span:before {\n        color: ${palette.gray[4]};\n        padding-left: 0.25rem;\n        padding-right: 0.25rem;\n        content: '\\\\B7'\n    }\n`\n\nconst SubInfo = ({username, publishDate, hasMarginTop}) => {\n    return (\n        <SubInfoBlock hasMarginTop={hasMarginTop}>\n            <span>\n                <b>\n                    <Link to={`/@${username}`}>{username}</Link>\n                </b>\n            </span>\n            <span>{new Date(publishDate).toLocaleDateString()}</span>\n        </SubInfoBlock>\n    )\n}\n\nexport default SubInfo;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport palette from \"../../lib/styles/palette\";\n\nconst TagsBlock = styled.div`\n    margin-top: .5rem;\n    .tag {\n        display: inline-block;\n        color: ${palette.red[7]};\n        text-decoration: none;\n        margin-right: .5rem;\n        &:hover {\n            color: ${palette.red[6]};\n        }\n    }\n`\n\nconst Tags = ({tags}) => {\n    return (\n        <TagsBlock>\n            {\n                tags.map(tag => (<Link className=\"tag\" tag={tag} to={`/?tag=${tag}`}>#{tag}</Link>))\n            }\n        </TagsBlock>\n    )\n}\n\nexport default Tags;","import { Helmet } from \"react-helmet-async\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport Responsive from \"../common/Responsive\";\nimport SubInfo from \"../common/SubInfo\";\nimport Tags from \"../common/Tags\";\n\nconst PostViewerBlock = styled(Responsive)`\n    margin-top: 4rem;\n`\nconst PostHead = styled.div`\n    border-bottom: 1px solid ${palette.gray[2]};\n    padding-bottom: 3rem;\n    margin-bottom: 3rem;\n    h1 {\n        font-size: 3rem;\n        line-height: 1.5;\n        margin: 0;\n    }\n`\nconst PostContent = styled.div`\n    font-size: 1.3125rem;\n    color: ${palette.gray[8]};\n`\n\nconst PostViewer = ({post, error, loading, actionButtons}) => {\n    // 에러 발생 시\n    if (error) {\n        if (error.response && error.response.status === 404 ) {\n            return <PostViewerBlock>No Post Exists</PostViewerBlock>\n        }\n        return <PostViewerBlock>Error!</PostViewerBlock>\n    }\n    // 로딩 중이거나 아직 데이터가 없을 때\n    if (loading || !post) {\n        return null;\n    }\n    \n    const {title, body, user, publishDate, tags} = post;\n\n    return (\n        <PostViewerBlock>\n            <Helmet>\n                <title>{title} - GIVVEMEE</title>\n            </Helmet>\n            <PostHead>\n                <h1>{title}</h1>\n                <SubInfo username={user.username} publishDate={publishDate} hasMarginTop/>\n                <Tags tags={tags}/>\n            </PostHead>\n            {actionButtons}\n            <PostContent dangerouslySetInnerHTML={{__html : body}}/>\n        </PostViewerBlock>\n    )\n}\n\nexport default PostViewer;\n","import * as postsAPI from '../lib/api/posts'\nimport {takeLatest} from 'redux-saga/effects'\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\nimport { createAction, handleActions } from 'redux-actions';\n\nconst [\n    READ_POST,\n    READ_POST_SUCCESS,\n    READ_POST_FAILURE\n] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST' // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n    yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = {\n    post: null,\n    error: null\n}\n\nconst post = handleActions(\n    {\n        [READ_POST_SUCCESS]: (state, {payload: post}) => ({\n            ...state,\n            post\n        }),\n        [READ_POST_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            error\n        }),\n        [UNLOAD_POST]: () => initialState\n    },\n    initialState\n)\n\nexport default post; ","import styled from \"styled-components\";\nimport Button from \"./Button\";\n\nconst Fullscreen = styled.div`\n    position: fixed;\n    z-index: 30;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.25);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\nconst AskModalBlock = styled.div`\n    width: 320px;\n    background: #fff;\n    padding: 1.5rem;\n    border-radius: 4px;\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n    h2 {\n        margin-top: 0;\n        margin-bottom: 1rem;\n    }\n    p {\n        margin-bottom: 3rem;\n    }\n    .buttons {\n        display: flex;\n        justify-content: flex-end;\n    }\n`\nconst StyledButton = styled(Button)`\n    height: 2rem;\n    & + & {\n        margin-left: 0.75rem;\n    }\n`\n\nconst AskModal = ({visible, title, description, confirmText='Confirm', cancelText='Cancel', onConfirm, onCancel}) => {\n    if(!visible) return null;\n    return (\n        <Fullscreen>\n            <AskModalBlock>\n                <h2>{title}</h2>\n                <p>{description}</p>\n                <div className=\"buttons\">\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n                    <StyledButton red onClick={onConfirm}>{confirmText}</StyledButton>\n                </div>\n            </AskModalBlock>\n        </Fullscreen>\n    )\n}\n\nexport default AskModal;","import AskModal from \"../common/AskModal\";\n\nconst AskRemoveModal = ({visible, onConfirm, onCancel}) => {\n    return (\n        <AskModal visible={visible} title=\"Delete post\" description=\"Are you sure to delete post?\" onCancel={onCancel} onConfirm={onConfirm}/>\n    );\n};\n\nexport default AskRemoveModal;","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport AskRemoveModal from \"./AskRemoveModal\";\n\nconst PostActionButtonsBlock = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-bottom: 2rem;\n    margin-top: 1.5rem;\n`\nconst ActionButton = styled.button`\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    color: ${palette.gray[6]};\n    font-weight: bold;\n    border: none;\n    outline: none;\n    font-size: 0.875rem;\n    cursor: pointer;\n    &:hover {\n        background: ${palette.gray[1]};\n        color: ${palette.red[7]};\n    }\n    & + & {\n        margin-left: 0.25rem;\n    }\n`\n\nconst PostActionButtons = ({onEdit, onRemove}) => {\n    const [modal, setModal] = useState(false)\n    const onRemoveClick = () => {\n        setModal(true)\n    }\n    const onCancel = () => {\n        setModal(false)\n    }\n    const onConfirm = () => {\n        setModal(false)\n        onRemove()\n    }\n    return (\n        <>\n            <PostActionButtonsBlock>\n                <ActionButton onClick={onEdit}>Edit Post</ActionButton>\n                <ActionButton onClick={onRemoveClick}>Delete Post</ActionButton>\n            </PostActionButtonsBlock>\n            <AskRemoveModal visible={modal} onConfirm={onConfirm} onCancel={onCancel}/>\n        </>\n        \n    )\n}\n\nexport default PostActionButtons;","\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport PostViewer from '../../components/post/PostViewer';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({match, history}) => {\n    // 처음 마운트될 때 포스트 읽기 API 요청\n    const {postId} = match.params\n    const dispatch = useDispatch()\n    const {post, error, loading, user} = useSelector(({post, loading, user}) => ({\n        post: post.post,\n        error: post.error,\n        loading: loading['post/READ_POST'],\n        user: user.user\n    }))\n\n    useEffect(() => {\n        dispatch(readPost(postId))\n        // 언마운트 될 때 리덕스에서 포스트 데이터 없애기\n        return () => {\n            dispatch(unloadPost())\n        }\n    }, [dispatch, postId])\n\n    const onEdit = () => {\n        dispatch(setOriginalPost(post));\n        history.push('/write')\n    }\n\n    const onRemove = async () => {\n        try {\n            await removePost(postId)\n            history.push('/') // 홈으로 이동\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const ownPost = (user && user._id) === (post && post.user._id)\n    return (\n        <PostViewer post={post} loading={loading} error={error} actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove}/>}/>\n    );\n};\n\nexport default withRouter(PostViewerContainer);","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n    return (\n        <>\n            <HeaderContainer/>\n            <PostViewerContainer />\n        </>\n    );\n};\n\nexport default PostPage;","import styled from \"styled-components\";\nimport qs from 'qs'\nimport Button from \"../common/Button\";\n\nconst PaginationBlock = styled.div`\n    width: 320px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 3rem;\n`\nconst PageNumber = styled.div``\nconst buildLink = ({username, tag, page}) => {\n    const query = qs.stringify({tag, page})\n    return username ? `/@${username}?${query}` : `/?${query}`\n}\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n    return (\n      <PaginationBlock>\n        <Button\n          disabled={page === 1}\n          to={\n            page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n          }\n        >\n          Prev\n        </Button>\n        <PageNumber>{page}</PageNumber>\n        <Button\n          disabled={page === lastPage}\n          to={\n            page === lastPage\n              ? undefined\n              : buildLink({ username, tag, page: page + 1 })\n          }\n        >\n          Next\n        </Button>\n      </PaginationBlock>\n    );\n  };\n\nexport default Pagination;","import React from 'react';\nimport Pagination from '../../components/posts/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!posts || loading) return null;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, username, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n\n// import Pagination from \"../../components/posts/Pagination\";\n// import qs from 'qs';\n// import { useSelector } from \"react-redux\";\n// import { withRouter } from \"react-router-dom\";\n\n// const PaginationContainer = ({location, match}) => {\n//     const {lastPage, posts, loading} = useSelector(({posts, loading}) => ({\n//         lastPage: posts.lastPage,\n//         posts: posts.posts,\n//         loading: loading['posts/LIST_POSTS']\n//     }))\n\n//     // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n//     if (!posts || loading) return null;\n//     const {username} = match.params;\n    \n//     // page 가 없으면 1을 기본 값으로 사용\n//     const {tag, page = 1} = qs.parse(location.search, {\n//         ignoreQueryPrefix: true\n//     })\n\n//     return (\n//         <Pagination tag={tag} username={username} page={parseInt(page, 10)} lastPage={lastPage}/>\n//     );\n// };\n\n// export default withRouter(PaginationContainer);","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport palette from \"../../lib/styles/palette\";\nimport Button from \"../common/Button\";\nimport Responsive from \"../common/Responsive\";\nimport SubInfo from \"../common/SubInfo\";\nimport Tags from \"../common/Tags\";\n\nconst PostListBlock = styled(Responsive)`\n    margin-top: 3rem;\n`\nconst WritePostButtonWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-bottom: 3rem;\n`\nconst PostItemBlock = styled.div`\n    padding: 3rem 0;\n    &:first-child {\n        padding-top: 0;\n    }\n    & + & {\n        border-top: 1px solid ${palette.gray[2]}\n    }\n    h2 {\n        font-size: 2rem;\n        margin-bottom: 0;\n        margin-top: 0;\n        &:hover {\n            color: ${palette.gray[6]}\n        }\n    }\n    p {\n        margin-top: 2rem;\n    }\n`\nconst PostItem = ({post}) => {\n    const {publishDate, user, tags, title, body, _id} = post\n    return (\n        <PostItemBlock>\n            <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n            <SubInfo username={user.username} publishDate={new Date(publishDate)}/>\n            <Tags tags={tags} />\n            <p>{body}</p>\n        </PostItemBlock>\n    )\n}\n\nconst PostList = ({posts, loading, error, showWriteButton}) => {\n    // 에러 발생 시\n    if (error) {\n        return <PostListBlock>Error!</PostListBlock>\n    }\n    return (\n        <PostListBlock>\n            <WritePostButtonWrapper>\n                {showWriteButton && (<Button red to=\"/write\">Post new</Button>)}\n            </WritePostButtonWrapper>\n            {/* 로딩 중이 아니고 포스트 배열이 존재할 때만 보여 줌 */}\n            {!loading && posts && (\n                <div>\n                    {posts.map (post => (<PostItem post={post} key={post._id}/>))}\n                </div>)\n            }\n        </PostListBlock>\n    )\n}\n\nexport default PostList;","import * as postsAPI from '../lib/api/posts'\nimport {takeLatest} from 'redux-saga/effects'\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga'\nimport { createAction, handleActions } from 'redux-actions'\n\nconst [\n    LIST_POSTS,\n    LIST_POSTS_SUCCESS,\n    LIST_POSTS_FAILURE\n] = createRequestActionTypes('posts/LIST_POSTS')\n\nexport const listPosts = createAction(\n    LIST_POSTS, ({username, tag, page}) => ({username, tag, page})\n) \n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts)\nexport function* postsSaga() {\n    yield takeLatest(LIST_POSTS, listPostsSaga)\n}\n\nconst initialState = {\n    posts: null,\n    error: null,\n    lastPage: 1,\n}\n\nconst posts = handleActions(\n    {\n        [LIST_POSTS_SUCCESS]: (state, {payload: posts, meta: response}) => ({\n            ...state,\n            posts,\n            lastPage: parseInt(response.headers['last-page'], 10) // 문자열을 숫자로 변환\n        }),\n        [LIST_POSTS_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            error\n        })\n    },\n    initialState\n)\n\nexport default posts;","import React, { useEffect } from \"react\";\nimport qs from \"qs\";\nimport { withRouter } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostList from \"../../components/posts/PostList\";\nimport { listPosts } from \"../../modules/posts\";\n\nconst PostListContainer = ({ location, match }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    const { username } = match.params;\n    const { tag, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n\n// import React, { useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import { useDispatch } from 'react-redux';\n// import qs from 'qs'\n// import { listPosts } from '../../lib/api/posts';\n// import PostList from '../../components/posts/PostList';\n// import { withRouter } from 'react-router';\n\n// const PostListContainer = ({location, match}) => {\n//     const dispatch = useDispatch()\n//     const {posts, error, loading, user} = useSelector(({posts, loading, user}) => ({\n//         posts: posts.posts,\n//         error: posts.error,\n//         loading: loading['posts/LIST_POST'],\n//         user: user.user\n//     }),\n//     )\n\n//     useEffect(() => {\n//         const {username} = match.parse;\n//         const {tag, page} = qs.parse(location.search, {\n//             ignoreQueryPrefix: true\n//         })\n//         dispatch(listPosts({username, page, tag}))\n//     }, [dispatch, location.search])\n\n  \n\n//     return (\n//         <PostList loading={loading} error={error} posts={posts} showWriteButton={user}/>\n//     );\n// };\n\n// export default withRouter(PostListContainer);","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PaginationContainer from '../containers/posts/PaginationContainer';\nimport PostListContainer from '../containers/posts/PostListContainer';\n\nconst PostListPage = () => {\n    return (\n        <>\n            <HeaderContainer />\n            <PostListContainer />\n            <PaginationContainer />\n        </>\n    );\n};\n\nexport default PostListPage;","import React from 'react';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport PostListPage from './pages/PostListPage';\nimport { Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>GIVVEMEE ❣️</title>\n      </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\"/>\n    </>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport write, { writeSaga } from './write';\nimport user, { userSaga } from './user';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer, { rootSaga } from './modules/index';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga'\nimport { check, tempSetUser } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n)\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user')\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안 함\n    store.dispatch(tempSetUser(JSON.parse(user)))\n    store.dispatch(check())\n  } catch (e) {\n    console.log('localStorage is not working')\n  }\n}\n\nsagaMiddleware.run(rootSaga)\nloadUser()\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}